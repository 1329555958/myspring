/**
 * This class is generated by jOOQ
 */
package org.wch.jooq.entity;


import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;
import org.wch.jooq.entity.tables.TAccount;
import org.wch.jooq.entity.tables.TChanView;
import org.wch.jooq.entity.tables.TDict;
import org.wch.jooq.entity.tables.TEntry;
import org.wch.jooq.entity.tables.TMember;
import org.wch.jooq.entity.tables.TOrder;
import org.wch.jooq.entity.tables.TPayment;
import org.wch.jooq.entity.tables.TSequence;
import org.wch.jooq.entity.tables.records.TAccountRecord;
import org.wch.jooq.entity.tables.records.TChanViewRecord;
import org.wch.jooq.entity.tables.records.TDictRecord;
import org.wch.jooq.entity.tables.records.TEntryRecord;
import org.wch.jooq.entity.tables.records.TMemberRecord;
import org.wch.jooq.entity.tables.records.TOrderRecord;
import org.wch.jooq.entity.tables.records.TPaymentRecord;
import org.wch.jooq.entity.tables.records.TSequenceRecord;


/**
 * A class modelling foreign key relationships between tables of the <code>optimus</code> 
 * schema
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final Identity<TEntryRecord, Long> IDENTITY_T_ENTRY = Identities0.IDENTITY_T_ENTRY;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<TAccountRecord> KEY_T_ACCOUNT_PRIMARY = UniqueKeys0.KEY_T_ACCOUNT_PRIMARY;
	public static final UniqueKey<TChanViewRecord> KEY_T_CHAN_VIEW_PRIMARY = UniqueKeys0.KEY_T_CHAN_VIEW_PRIMARY;
	public static final UniqueKey<TDictRecord> KEY_T_DICT_PRIMARY = UniqueKeys0.KEY_T_DICT_PRIMARY;
	public static final UniqueKey<TEntryRecord> KEY_T_ENTRY_PRIMARY = UniqueKeys0.KEY_T_ENTRY_PRIMARY;
	public static final UniqueKey<TMemberRecord> KEY_T_MEMBER_PRIMARY = UniqueKeys0.KEY_T_MEMBER_PRIMARY;
	public static final UniqueKey<TMemberRecord> KEY_T_MEMBER_CHAN_ID_CHAN_USER_ID = UniqueKeys0.KEY_T_MEMBER_CHAN_ID_CHAN_USER_ID;
	public static final UniqueKey<TOrderRecord> KEY_T_ORDER_PRIMARY = UniqueKeys0.KEY_T_ORDER_PRIMARY;
	public static final UniqueKey<TOrderRecord> KEY_T_ORDER_OUTER_ORDER_ID = UniqueKeys0.KEY_T_ORDER_OUTER_ORDER_ID;
	public static final UniqueKey<TPaymentRecord> KEY_T_PAYMENT_PRIMARY = UniqueKeys0.KEY_T_PAYMENT_PRIMARY;
	public static final UniqueKey<TSequenceRecord> KEY_T_SEQUENCE_PRIMARY = UniqueKeys0.KEY_T_SEQUENCE_PRIMARY;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------


	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends AbstractKeys {
		public static Identity<TEntryRecord, Long> IDENTITY_T_ENTRY = createIdentity(TEntry.T_ENTRY, TEntry.T_ENTRY.ENTRY_ID);
	}

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<TAccountRecord> KEY_T_ACCOUNT_PRIMARY = createUniqueKey(TAccount.T_ACCOUNT, TAccount.T_ACCOUNT.ACCOUNT_ID);
		public static final UniqueKey<TChanViewRecord> KEY_T_CHAN_VIEW_PRIMARY = createUniqueKey(TChanView.T_CHAN_VIEW, TChanView.T_CHAN_VIEW.ID);
		public static final UniqueKey<TDictRecord> KEY_T_DICT_PRIMARY = createUniqueKey(TDict.T_DICT, TDict.T_DICT.ID);
		public static final UniqueKey<TEntryRecord> KEY_T_ENTRY_PRIMARY = createUniqueKey(TEntry.T_ENTRY, TEntry.T_ENTRY.ENTRY_ID);
		public static final UniqueKey<TMemberRecord> KEY_T_MEMBER_PRIMARY = createUniqueKey(TMember.T_MEMBER, TMember.T_MEMBER.MEMBER_ID);
		public static final UniqueKey<TMemberRecord> KEY_T_MEMBER_CHAN_ID_CHAN_USER_ID = createUniqueKey(TMember.T_MEMBER, TMember.T_MEMBER.CHAN_ID, TMember.T_MEMBER.CHAN_USER_ID);
		public static final UniqueKey<TOrderRecord> KEY_T_ORDER_PRIMARY = createUniqueKey(TOrder.T_ORDER, TOrder.T_ORDER.ORDER_ID);
		public static final UniqueKey<TOrderRecord> KEY_T_ORDER_OUTER_ORDER_ID = createUniqueKey(TOrder.T_ORDER, TOrder.T_ORDER.OUTER_ORDER_ID);
		public static final UniqueKey<TPaymentRecord> KEY_T_PAYMENT_PRIMARY = createUniqueKey(TPayment.T_PAYMENT, TPayment.T_PAYMENT.ID);
		public static final UniqueKey<TSequenceRecord> KEY_T_SEQUENCE_PRIMARY = createUniqueKey(TSequence.T_SEQUENCE, TSequence.T_SEQUENCE.NAME);
	}
}
