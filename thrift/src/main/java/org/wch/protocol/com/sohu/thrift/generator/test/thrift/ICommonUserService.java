/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sohu.thrift.generator.test.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ICommonUserService {

  public interface Iface {

    public Map<Long,List<Long>> getGroupUsers(List<String> arg0, List<User> arg1, List<Long> arg2, long arg3) throws org.apache.thrift.TException;

    public List<String> testCase1(Map<Integer,String> arg0, List<User> arg1, List<String> arg2, long arg3, String arg4) throws org.apache.thrift.TException;

    public Map<String,List<User>> getUsersByName(List<String> arg0) throws org.apache.thrift.TException;

    public User login(int arg0, String arg1) throws org.apache.thrift.TException;

    public Map<Long,User> getUserByIds(List<User> arg0) throws org.apache.thrift.TException;

    public List<User> getUserIds(long arg0) throws org.apache.thrift.TException;

    public boolean saveUser(User arg0) throws org.apache.thrift.TException;

    public User getUserById(long arg0) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getGroupUsers(List<String> arg0, List<User> arg1, List<Long> arg2, long arg3, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void testCase1(Map<Integer,String> arg0, List<User> arg1, List<String> arg2, long arg3, String arg4, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUsersByName(List<String> arg0, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void login(int arg0, String arg1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserByIds(List<User> arg0, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserIds(long arg0, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveUser(User arg0, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserById(long arg0, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<Long,List<Long>> getGroupUsers(List<String> arg0, List<User> arg1, List<Long> arg2, long arg3) throws org.apache.thrift.TException
    {
      send_getGroupUsers(arg0, arg1, arg2, arg3);
      return recv_getGroupUsers();
    }

    public void send_getGroupUsers(List<String> arg0, List<User> arg1, List<Long> arg2, long arg3) throws org.apache.thrift.TException
    {
      getGroupUsers_args args = new getGroupUsers_args();
      args.setArg0(arg0);
      args.setArg1(arg1);
      args.setArg2(arg2);
      args.setArg3(arg3);
      sendBase("getGroupUsers", args);
    }

    public Map<Long,List<Long>> recv_getGroupUsers() throws org.apache.thrift.TException
    {
      getGroupUsers_result result = new getGroupUsers_result();
      receiveBase(result, "getGroupUsers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGroupUsers failed: unknown result");
    }

    public List<String> testCase1(Map<Integer,String> arg0, List<User> arg1, List<String> arg2, long arg3, String arg4) throws org.apache.thrift.TException
    {
      send_testCase1(arg0, arg1, arg2, arg3, arg4);
      return recv_testCase1();
    }

    public void send_testCase1(Map<Integer,String> arg0, List<User> arg1, List<String> arg2, long arg3, String arg4) throws org.apache.thrift.TException
    {
      testCase1_args args = new testCase1_args();
      args.setArg0(arg0);
      args.setArg1(arg1);
      args.setArg2(arg2);
      args.setArg3(arg3);
      args.setArg4(arg4);
      sendBase("testCase1", args);
    }

    public List<String> recv_testCase1() throws org.apache.thrift.TException
    {
      testCase1_result result = new testCase1_result();
      receiveBase(result, "testCase1");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testCase1 failed: unknown result");
    }

    public Map<String,List<User>> getUsersByName(List<String> arg0) throws org.apache.thrift.TException
    {
      send_getUsersByName(arg0);
      return recv_getUsersByName();
    }

    public void send_getUsersByName(List<String> arg0) throws org.apache.thrift.TException
    {
      getUsersByName_args args = new getUsersByName_args();
      args.setArg0(arg0);
      sendBase("getUsersByName", args);
    }

    public Map<String,List<User>> recv_getUsersByName() throws org.apache.thrift.TException
    {
      getUsersByName_result result = new getUsersByName_result();
      receiveBase(result, "getUsersByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUsersByName failed: unknown result");
    }

    public User login(int arg0, String arg1) throws org.apache.thrift.TException
    {
      send_login(arg0, arg1);
      return recv_login();
    }

    public void send_login(int arg0, String arg1) throws org.apache.thrift.TException
    {
      login_args args = new login_args();
      args.setArg0(arg0);
      args.setArg1(arg1);
      sendBase("login", args);
    }

    public User recv_login() throws org.apache.thrift.TException
    {
      login_result result = new login_result();
      receiveBase(result, "login");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "login failed: unknown result");
    }

    public Map<Long,User> getUserByIds(List<User> arg0) throws org.apache.thrift.TException
    {
      send_getUserByIds(arg0);
      return recv_getUserByIds();
    }

    public void send_getUserByIds(List<User> arg0) throws org.apache.thrift.TException
    {
      getUserByIds_args args = new getUserByIds_args();
      args.setArg0(arg0);
      sendBase("getUserByIds", args);
    }

    public Map<Long,User> recv_getUserByIds() throws org.apache.thrift.TException
    {
      getUserByIds_result result = new getUserByIds_result();
      receiveBase(result, "getUserByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserByIds failed: unknown result");
    }

    public List<User> getUserIds(long arg0) throws org.apache.thrift.TException
    {
      send_getUserIds(arg0);
      return recv_getUserIds();
    }

    public void send_getUserIds(long arg0) throws org.apache.thrift.TException
    {
      getUserIds_args args = new getUserIds_args();
      args.setArg0(arg0);
      sendBase("getUserIds", args);
    }

    public List<User> recv_getUserIds() throws org.apache.thrift.TException
    {
      getUserIds_result result = new getUserIds_result();
      receiveBase(result, "getUserIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserIds failed: unknown result");
    }

    public boolean saveUser(User arg0) throws org.apache.thrift.TException
    {
      send_saveUser(arg0);
      return recv_saveUser();
    }

    public void send_saveUser(User arg0) throws org.apache.thrift.TException
    {
      saveUser_args args = new saveUser_args();
      args.setArg0(arg0);
      sendBase("saveUser", args);
    }

    public boolean recv_saveUser() throws org.apache.thrift.TException
    {
      saveUser_result result = new saveUser_result();
      receiveBase(result, "saveUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveUser failed: unknown result");
    }

    public User getUserById(long arg0) throws org.apache.thrift.TException
    {
      send_getUserById(arg0);
      return recv_getUserById();
    }

    public void send_getUserById(long arg0) throws org.apache.thrift.TException
    {
      getUserById_args args = new getUserById_args();
      args.setArg0(arg0);
      sendBase("getUserById", args);
    }

    public User recv_getUserById() throws org.apache.thrift.TException
    {
      getUserById_result result = new getUserById_result();
      receiveBase(result, "getUserById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserById failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getGroupUsers(List<String> arg0, List<User> arg1, List<Long> arg2, long arg3, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGroupUsers_call method_call = new getGroupUsers_call(arg0, arg1, arg2, arg3, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGroupUsers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> arg0;
      private List<User> arg1;
      private List<Long> arg2;
      private long arg3;
      public getGroupUsers_call(List<String> arg0, List<User> arg1, List<Long> arg2, long arg3, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arg0 = arg0;
        this.arg1 = arg1;
        this.arg2 = arg2;
        this.arg3 = arg3;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGroupUsers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGroupUsers_args args = new getGroupUsers_args();
        args.setArg0(arg0);
        args.setArg1(arg1);
        args.setArg2(arg2);
        args.setArg3(arg3);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Long,List<Long>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGroupUsers();
      }
    }

    public void testCase1(Map<Integer,String> arg0, List<User> arg1, List<String> arg2, long arg3, String arg4, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      testCase1_call method_call = new testCase1_call(arg0, arg1, arg2, arg3, arg4, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class testCase1_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<Integer,String> arg0;
      private List<User> arg1;
      private List<String> arg2;
      private long arg3;
      private String arg4;
      public testCase1_call(Map<Integer,String> arg0, List<User> arg1, List<String> arg2, long arg3, String arg4, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arg0 = arg0;
        this.arg1 = arg1;
        this.arg2 = arg2;
        this.arg3 = arg3;
        this.arg4 = arg4;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("testCase1", org.apache.thrift.protocol.TMessageType.CALL, 0));
        testCase1_args args = new testCase1_args();
        args.setArg0(arg0);
        args.setArg1(arg1);
        args.setArg2(arg2);
        args.setArg3(arg3);
        args.setArg4(arg4);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_testCase1();
      }
    }

    public void getUsersByName(List<String> arg0, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUsersByName_call method_call = new getUsersByName_call(arg0, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUsersByName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> arg0;
      public getUsersByName_call(List<String> arg0, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arg0 = arg0;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUsersByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUsersByName_args args = new getUsersByName_args();
        args.setArg0(arg0);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,List<User>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUsersByName();
      }
    }

    public void login(int arg0, String arg1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      login_call method_call = new login_call(arg0, arg1, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class login_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int arg0;
      private String arg1;
      public login_call(int arg0, String arg1, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arg0 = arg0;
        this.arg1 = arg1;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.CALL, 0));
        login_args args = new login_args();
        args.setArg0(arg0);
        args.setArg1(arg1);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public User getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_login();
      }
    }

    public void getUserByIds(List<User> arg0, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserByIds_call method_call = new getUserByIds_call(arg0, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<User> arg0;
      public getUserByIds_call(List<User> arg0, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arg0 = arg0;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserByIds_args args = new getUserByIds_args();
        args.setArg0(arg0);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Long,User> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserByIds();
      }
    }

    public void getUserIds(long arg0, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserIds_call method_call = new getUserIds_call(arg0, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long arg0;
      public getUserIds_call(long arg0, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arg0 = arg0;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserIds_args args = new getUserIds_args();
        args.setArg0(arg0);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<User> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserIds();
      }
    }

    public void saveUser(User arg0, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveUser_call method_call = new saveUser_call(arg0, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private User arg0;
      public saveUser_call(User arg0, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arg0 = arg0;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveUser_args args = new saveUser_args();
        args.setArg0(arg0);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveUser();
      }
    }

    public void getUserById(long arg0, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserById_call method_call = new getUserById_call(arg0, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long arg0;
      public getUserById_call(long arg0, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.arg0 = arg0;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserById_args args = new getUserById_args();
        args.setArg0(arg0);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public User getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserById();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getGroupUsers", new getGroupUsers());
      processMap.put("testCase1", new testCase1());
      processMap.put("getUsersByName", new getUsersByName());
      processMap.put("login", new login());
      processMap.put("getUserByIds", new getUserByIds());
      processMap.put("getUserIds", new getUserIds());
      processMap.put("saveUser", new saveUser());
      processMap.put("getUserById", new getUserById());
      return processMap;
    }

    public static class getGroupUsers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGroupUsers_args> {
      public getGroupUsers() {
        super("getGroupUsers");
      }

      public getGroupUsers_args getEmptyArgsInstance() {
        return new getGroupUsers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getGroupUsers_result getResult(I iface, getGroupUsers_args args) throws org.apache.thrift.TException {
        getGroupUsers_result result = new getGroupUsers_result();
        result.success = iface.getGroupUsers(args.arg0, args.arg1, args.arg2, args.arg3);
        return result;
      }
    }

    public static class testCase1<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testCase1_args> {
      public testCase1() {
        super("testCase1");
      }

      public testCase1_args getEmptyArgsInstance() {
        return new testCase1_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public testCase1_result getResult(I iface, testCase1_args args) throws org.apache.thrift.TException {
        testCase1_result result = new testCase1_result();
        result.success = iface.testCase1(args.arg0, args.arg1, args.arg2, args.arg3, args.arg4);
        return result;
      }
    }

    public static class getUsersByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUsersByName_args> {
      public getUsersByName() {
        super("getUsersByName");
      }

      public getUsersByName_args getEmptyArgsInstance() {
        return new getUsersByName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUsersByName_result getResult(I iface, getUsersByName_args args) throws org.apache.thrift.TException {
        getUsersByName_result result = new getUsersByName_result();
        result.success = iface.getUsersByName(args.arg0);
        return result;
      }
    }

    public static class login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, login_args> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public login_result getResult(I iface, login_args args) throws org.apache.thrift.TException {
        login_result result = new login_result();
        result.success = iface.login(args.arg0, args.arg1);
        return result;
      }
    }

    public static class getUserByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserByIds_args> {
      public getUserByIds() {
        super("getUserByIds");
      }

      public getUserByIds_args getEmptyArgsInstance() {
        return new getUserByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserByIds_result getResult(I iface, getUserByIds_args args) throws org.apache.thrift.TException {
        getUserByIds_result result = new getUserByIds_result();
        result.success = iface.getUserByIds(args.arg0);
        return result;
      }
    }

    public static class getUserIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserIds_args> {
      public getUserIds() {
        super("getUserIds");
      }

      public getUserIds_args getEmptyArgsInstance() {
        return new getUserIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserIds_result getResult(I iface, getUserIds_args args) throws org.apache.thrift.TException {
        getUserIds_result result = new getUserIds_result();
        result.success = iface.getUserIds(args.arg0);
        return result;
      }
    }

    public static class saveUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveUser_args> {
      public saveUser() {
        super("saveUser");
      }

      public saveUser_args getEmptyArgsInstance() {
        return new saveUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveUser_result getResult(I iface, saveUser_args args) throws org.apache.thrift.TException {
        saveUser_result result = new saveUser_result();
        result.success = iface.saveUser(args.arg0);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getUserById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserById_args> {
      public getUserById() {
        super("getUserById");
      }

      public getUserById_args getEmptyArgsInstance() {
        return new getUserById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserById_result getResult(I iface, getUserById_args args) throws org.apache.thrift.TException {
        getUserById_result result = new getUserById_result();
        result.success = iface.getUserById(args.arg0);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getGroupUsers", new getGroupUsers());
      processMap.put("testCase1", new testCase1());
      processMap.put("getUsersByName", new getUsersByName());
      processMap.put("login", new login());
      processMap.put("getUserByIds", new getUserByIds());
      processMap.put("getUserIds", new getUserIds());
      processMap.put("saveUser", new saveUser());
      processMap.put("getUserById", new getUserById());
      return processMap;
    }

    public static class getGroupUsers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getGroupUsers_args, Map<Long,List<Long>>> {
      public getGroupUsers() {
        super("getGroupUsers");
      }

      public getGroupUsers_args getEmptyArgsInstance() {
        return new getGroupUsers_args();
      }

      public AsyncMethodCallback<Map<Long,List<Long>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Long,List<Long>>>() { 
          public void onComplete(Map<Long,List<Long>> o) {
            getGroupUsers_result result = new getGroupUsers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getGroupUsers_result result = new getGroupUsers_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getGroupUsers_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Long,List<Long>>> resultHandler) throws TException {
        iface.getGroupUsers(args.arg0, args.arg1, args.arg2, args.arg3,resultHandler);
      }
    }

    public static class testCase1<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, testCase1_args, List<String>> {
      public testCase1() {
        super("testCase1");
      }

      public testCase1_args getEmptyArgsInstance() {
        return new testCase1_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            testCase1_result result = new testCase1_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            testCase1_result result = new testCase1_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, testCase1_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.testCase1(args.arg0, args.arg1, args.arg2, args.arg3, args.arg4,resultHandler);
      }
    }

    public static class getUsersByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUsersByName_args, Map<String,List<User>>> {
      public getUsersByName() {
        super("getUsersByName");
      }

      public getUsersByName_args getEmptyArgsInstance() {
        return new getUsersByName_args();
      }

      public AsyncMethodCallback<Map<String,List<User>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,List<User>>>() { 
          public void onComplete(Map<String,List<User>> o) {
            getUsersByName_result result = new getUsersByName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUsersByName_result result = new getUsersByName_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUsersByName_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,List<User>>> resultHandler) throws TException {
        iface.getUsersByName(args.arg0,resultHandler);
      }
    }

    public static class login<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, login_args, User> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      public AsyncMethodCallback<User> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<User>() { 
          public void onComplete(User o) {
            login_result result = new login_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            login_result result = new login_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, login_args args, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler) throws TException {
        iface.login(args.arg0, args.arg1,resultHandler);
      }
    }

    public static class getUserByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserByIds_args, Map<Long,User>> {
      public getUserByIds() {
        super("getUserByIds");
      }

      public getUserByIds_args getEmptyArgsInstance() {
        return new getUserByIds_args();
      }

      public AsyncMethodCallback<Map<Long,User>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Long,User>>() { 
          public void onComplete(Map<Long,User> o) {
            getUserByIds_result result = new getUserByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserByIds_result result = new getUserByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserByIds_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Long,User>> resultHandler) throws TException {
        iface.getUserByIds(args.arg0,resultHandler);
      }
    }

    public static class getUserIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserIds_args, List<User>> {
      public getUserIds() {
        super("getUserIds");
      }

      public getUserIds_args getEmptyArgsInstance() {
        return new getUserIds_args();
      }

      public AsyncMethodCallback<List<User>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<User>>() { 
          public void onComplete(List<User> o) {
            getUserIds_result result = new getUserIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserIds_result result = new getUserIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<User>> resultHandler) throws TException {
        iface.getUserIds(args.arg0,resultHandler);
      }
    }

    public static class saveUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveUser_args, Boolean> {
      public saveUser() {
        super("saveUser");
      }

      public saveUser_args getEmptyArgsInstance() {
        return new saveUser_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            saveUser_result result = new saveUser_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveUser_result result = new saveUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveUser_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.saveUser(args.arg0,resultHandler);
      }
    }

    public static class getUserById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserById_args, User> {
      public getUserById() {
        super("getUserById");
      }

      public getUserById_args getEmptyArgsInstance() {
        return new getUserById_args();
      }

      public AsyncMethodCallback<User> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<User>() { 
          public void onComplete(User o) {
            getUserById_result result = new getUserById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserById_result result = new getUserById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserById_args args, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler) throws TException {
        iface.getUserById(args.arg0,resultHandler);
      }
    }

  }

  public static class getGroupUsers_args implements org.apache.thrift.TBase<getGroupUsers_args, getGroupUsers_args._Fields>, java.io.Serializable, Cloneable, Comparable<getGroupUsers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGroupUsers_args");

    private static final org.apache.thrift.protocol.TField ARG0_FIELD_DESC = new org.apache.thrift.protocol.TField("arg0", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField ARG1_FIELD_DESC = new org.apache.thrift.protocol.TField("arg1", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField ARG2_FIELD_DESC = new org.apache.thrift.protocol.TField("arg2", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ARG3_FIELD_DESC = new org.apache.thrift.protocol.TField("arg3", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGroupUsers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGroupUsers_argsTupleSchemeFactory());
    }

    private List<String> arg0; // required
    private List<User> arg1; // required
    private List<Long> arg2; // required
    private long arg3; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG0((short)1, "arg0"),
      ARG1((short)2, "arg1"),
      ARG2((short)3, "arg2"),
      ARG3((short)4, "arg3");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG0
            return ARG0;
          case 2: // ARG1
            return ARG1;
          case 3: // ARG2
            return ARG2;
          case 4: // ARG3
            return ARG3;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ARG3_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG0, new org.apache.thrift.meta_data.FieldMetaData("arg0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ARG1, new org.apache.thrift.meta_data.FieldMetaData("arg1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class))));
      tmpMap.put(_Fields.ARG2, new org.apache.thrift.meta_data.FieldMetaData("arg2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.ARG3, new org.apache.thrift.meta_data.FieldMetaData("arg3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGroupUsers_args.class, metaDataMap);
    }

    public getGroupUsers_args() {
    }

    public getGroupUsers_args(
      List<String> arg0,
      List<User> arg1,
      List<Long> arg2,
      long arg3)
    {
      this();
      this.arg0 = arg0;
      this.arg1 = arg1;
      this.arg2 = arg2;
      this.arg3 = arg3;
      setArg3IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupUsers_args(getGroupUsers_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetArg0()) {
        List<String> __this__arg0 = new ArrayList<String>(other.arg0);
        this.arg0 = __this__arg0;
      }
      if (other.isSetArg1()) {
        List<User> __this__arg1 = new ArrayList<User>(other.arg1.size());
        for (User other_element : other.arg1) {
          __this__arg1.add(new User(other_element));
        }
        this.arg1 = __this__arg1;
      }
      if (other.isSetArg2()) {
        List<Long> __this__arg2 = new ArrayList<Long>(other.arg2);
        this.arg2 = __this__arg2;
      }
      this.arg3 = other.arg3;
    }

    public getGroupUsers_args deepCopy() {
      return new getGroupUsers_args(this);
    }

    @Override
    public void clear() {
      this.arg0 = null;
      this.arg1 = null;
      this.arg2 = null;
      setArg3IsSet(false);
      this.arg3 = 0;
    }

    public int getArg0Size() {
      return (this.arg0 == null) ? 0 : this.arg0.size();
    }

    public java.util.Iterator<String> getArg0Iterator() {
      return (this.arg0 == null) ? null : this.arg0.iterator();
    }

    public void addToArg0(String elem) {
      if (this.arg0 == null) {
        this.arg0 = new ArrayList<String>();
      }
      this.arg0.add(elem);
    }

    public List<String> getArg0() {
      return this.arg0;
    }

    public void setArg0(List<String> arg0) {
      this.arg0 = arg0;
    }

    public void unsetArg0() {
      this.arg0 = null;
    }

    /** Returns true if field arg0 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg0() {
      return this.arg0 != null;
    }

    public void setArg0IsSet(boolean value) {
      if (!value) {
        this.arg0 = null;
      }
    }

    public int getArg1Size() {
      return (this.arg1 == null) ? 0 : this.arg1.size();
    }

    public java.util.Iterator<User> getArg1Iterator() {
      return (this.arg1 == null) ? null : this.arg1.iterator();
    }

    public void addToArg1(User elem) {
      if (this.arg1 == null) {
        this.arg1 = new ArrayList<User>();
      }
      this.arg1.add(elem);
    }

    public List<User> getArg1() {
      return this.arg1;
    }

    public void setArg1(List<User> arg1) {
      this.arg1 = arg1;
    }

    public void unsetArg1() {
      this.arg1 = null;
    }

    /** Returns true if field arg1 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg1() {
      return this.arg1 != null;
    }

    public void setArg1IsSet(boolean value) {
      if (!value) {
        this.arg1 = null;
      }
    }

    public int getArg2Size() {
      return (this.arg2 == null) ? 0 : this.arg2.size();
    }

    public java.util.Iterator<Long> getArg2Iterator() {
      return (this.arg2 == null) ? null : this.arg2.iterator();
    }

    public void addToArg2(long elem) {
      if (this.arg2 == null) {
        this.arg2 = new ArrayList<Long>();
      }
      this.arg2.add(elem);
    }

    public List<Long> getArg2() {
      return this.arg2;
    }

    public void setArg2(List<Long> arg2) {
      this.arg2 = arg2;
    }

    public void unsetArg2() {
      this.arg2 = null;
    }

    /** Returns true if field arg2 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg2() {
      return this.arg2 != null;
    }

    public void setArg2IsSet(boolean value) {
      if (!value) {
        this.arg2 = null;
      }
    }

    public long getArg3() {
      return this.arg3;
    }

    public void setArg3(long arg3) {
      this.arg3 = arg3;
      setArg3IsSet(true);
    }

    public void unsetArg3() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARG3_ISSET_ID);
    }

    /** Returns true if field arg3 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg3() {
      return EncodingUtils.testBit(__isset_bitfield, __ARG3_ISSET_ID);
    }

    public void setArg3IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARG3_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG0:
        if (value == null) {
          unsetArg0();
        } else {
          setArg0((List<String>)value);
        }
        break;

      case ARG1:
        if (value == null) {
          unsetArg1();
        } else {
          setArg1((List<User>)value);
        }
        break;

      case ARG2:
        if (value == null) {
          unsetArg2();
        } else {
          setArg2((List<Long>)value);
        }
        break;

      case ARG3:
        if (value == null) {
          unsetArg3();
        } else {
          setArg3((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG0:
        return getArg0();

      case ARG1:
        return getArg1();

      case ARG2:
        return getArg2();

      case ARG3:
        return Long.valueOf(getArg3());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG0:
        return isSetArg0();
      case ARG1:
        return isSetArg1();
      case ARG2:
        return isSetArg2();
      case ARG3:
        return isSetArg3();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupUsers_args)
        return this.equals((getGroupUsers_args)that);
      return false;
    }

    public boolean equals(getGroupUsers_args that) {
      if (that == null)
        return false;

      boolean this_present_arg0 = true && this.isSetArg0();
      boolean that_present_arg0 = true && that.isSetArg0();
      if (this_present_arg0 || that_present_arg0) {
        if (!(this_present_arg0 && that_present_arg0))
          return false;
        if (!this.arg0.equals(that.arg0))
          return false;
      }

      boolean this_present_arg1 = true && this.isSetArg1();
      boolean that_present_arg1 = true && that.isSetArg1();
      if (this_present_arg1 || that_present_arg1) {
        if (!(this_present_arg1 && that_present_arg1))
          return false;
        if (!this.arg1.equals(that.arg1))
          return false;
      }

      boolean this_present_arg2 = true && this.isSetArg2();
      boolean that_present_arg2 = true && that.isSetArg2();
      if (this_present_arg2 || that_present_arg2) {
        if (!(this_present_arg2 && that_present_arg2))
          return false;
        if (!this.arg2.equals(that.arg2))
          return false;
      }

      boolean this_present_arg3 = true;
      boolean that_present_arg3 = true;
      if (this_present_arg3 || that_present_arg3) {
        if (!(this_present_arg3 && that_present_arg3))
          return false;
        if (this.arg3 != that.arg3)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getGroupUsers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArg0()).compareTo(other.isSetArg0());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg0()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg0, other.arg0);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg1()).compareTo(other.isSetArg1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg1, other.arg1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg2()).compareTo(other.isSetArg2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg2, other.arg2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg3()).compareTo(other.isSetArg3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg3, other.arg3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGroupUsers_args(");
      boolean first = true;

      sb.append("arg0:");
      if (this.arg0 == null) {
        sb.append("null");
      } else {
        sb.append(this.arg0);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg1:");
      if (this.arg1 == null) {
        sb.append("null");
      } else {
        sb.append(this.arg1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg2:");
      if (this.arg2 == null) {
        sb.append("null");
      } else {
        sb.append(this.arg2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg3:");
      sb.append(this.arg3);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGroupUsers_argsStandardSchemeFactory implements SchemeFactory {
      public getGroupUsers_argsStandardScheme getScheme() {
        return new getGroupUsers_argsStandardScheme();
      }
    }

    private static class getGroupUsers_argsStandardScheme extends StandardScheme<getGroupUsers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGroupUsers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG0
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.arg0 = new ArrayList<String>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    String _elem10;
                    _elem10 = iprot.readString();
                    struct.arg0.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setArg0IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARG1
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                  struct.arg1 = new ArrayList<User>(_list11.size);
                  for (int _i12 = 0; _i12 < _list11.size; ++_i12)
                  {
                    User _elem13;
                    _elem13 = new User();
                    _elem13.read(iprot);
                    struct.arg1.add(_elem13);
                  }
                  iprot.readListEnd();
                }
                struct.setArg1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ARG2
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                  struct.arg2 = new ArrayList<Long>(_list14.size);
                  for (int _i15 = 0; _i15 < _list14.size; ++_i15)
                  {
                    long _elem16;
                    _elem16 = iprot.readI64();
                    struct.arg2.add(_elem16);
                  }
                  iprot.readListEnd();
                }
                struct.setArg2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ARG3
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.arg3 = iprot.readI64();
                struct.setArg3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGroupUsers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg0 != null) {
          oprot.writeFieldBegin(ARG0_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.arg0.size()));
            for (String _iter17 : struct.arg0)
            {
              oprot.writeString(_iter17);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.arg1 != null) {
          oprot.writeFieldBegin(ARG1_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.arg1.size()));
            for (User _iter18 : struct.arg1)
            {
              _iter18.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.arg2 != null) {
          oprot.writeFieldBegin(ARG2_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.arg2.size()));
            for (long _iter19 : struct.arg2)
            {
              oprot.writeI64(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ARG3_FIELD_DESC);
        oprot.writeI64(struct.arg3);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGroupUsers_argsTupleSchemeFactory implements SchemeFactory {
      public getGroupUsers_argsTupleScheme getScheme() {
        return new getGroupUsers_argsTupleScheme();
      }
    }

    private static class getGroupUsers_argsTupleScheme extends TupleScheme<getGroupUsers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGroupUsers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg0()) {
          optionals.set(0);
        }
        if (struct.isSetArg1()) {
          optionals.set(1);
        }
        if (struct.isSetArg2()) {
          optionals.set(2);
        }
        if (struct.isSetArg3()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetArg0()) {
          {
            oprot.writeI32(struct.arg0.size());
            for (String _iter20 : struct.arg0)
            {
              oprot.writeString(_iter20);
            }
          }
        }
        if (struct.isSetArg1()) {
          {
            oprot.writeI32(struct.arg1.size());
            for (User _iter21 : struct.arg1)
            {
              _iter21.write(oprot);
            }
          }
        }
        if (struct.isSetArg2()) {
          {
            oprot.writeI32(struct.arg2.size());
            for (long _iter22 : struct.arg2)
            {
              oprot.writeI64(_iter22);
            }
          }
        }
        if (struct.isSetArg3()) {
          oprot.writeI64(struct.arg3);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGroupUsers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.arg0 = new ArrayList<String>(_list23.size);
            for (int _i24 = 0; _i24 < _list23.size; ++_i24)
            {
              String _elem25;
              _elem25 = iprot.readString();
              struct.arg0.add(_elem25);
            }
          }
          struct.setArg0IsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.arg1 = new ArrayList<User>(_list26.size);
            for (int _i27 = 0; _i27 < _list26.size; ++_i27)
            {
              User _elem28;
              _elem28 = new User();
              _elem28.read(iprot);
              struct.arg1.add(_elem28);
            }
          }
          struct.setArg1IsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.arg2 = new ArrayList<Long>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              long _elem31;
              _elem31 = iprot.readI64();
              struct.arg2.add(_elem31);
            }
          }
          struct.setArg2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.arg3 = iprot.readI64();
          struct.setArg3IsSet(true);
        }
      }
    }

  }

  public static class getGroupUsers_result implements org.apache.thrift.TBase<getGroupUsers_result, getGroupUsers_result._Fields>, java.io.Serializable, Cloneable, Comparable<getGroupUsers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGroupUsers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGroupUsers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGroupUsers_resultTupleSchemeFactory());
    }

    private Map<Long,List<Long>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGroupUsers_result.class, metaDataMap);
    }

    public getGroupUsers_result() {
    }

    public getGroupUsers_result(
      Map<Long,List<Long>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupUsers_result(getGroupUsers_result other) {
      if (other.isSetSuccess()) {
        Map<Long,List<Long>> __this__success = new HashMap<Long,List<Long>>(other.success.size());
        for (Map.Entry<Long, List<Long>> other_element : other.success.entrySet()) {

          Long other_element_key = other_element.getKey();
          List<Long> other_element_value = other_element.getValue();

          Long __this__success_copy_key = other_element_key;

          List<Long> __this__success_copy_value = new ArrayList<Long>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getGroupUsers_result deepCopy() {
      return new getGroupUsers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(long key, List<Long> val) {
      if (this.success == null) {
        this.success = new HashMap<Long,List<Long>>();
      }
      this.success.put(key, val);
    }

    public Map<Long,List<Long>> getSuccess() {
      return this.success;
    }

    public void setSuccess(Map<Long,List<Long>> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Long,List<Long>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupUsers_result)
        return this.equals((getGroupUsers_result)that);
      return false;
    }

    public boolean equals(getGroupUsers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getGroupUsers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGroupUsers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGroupUsers_resultStandardSchemeFactory implements SchemeFactory {
      public getGroupUsers_resultStandardScheme getScheme() {
        return new getGroupUsers_resultStandardScheme();
      }
    }

    private static class getGroupUsers_resultStandardScheme extends StandardScheme<getGroupUsers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGroupUsers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
                  struct.success = new HashMap<Long,List<Long>>(2*_map32.size);
                  for (int _i33 = 0; _i33 < _map32.size; ++_i33)
                  {
                    long _key34;
                    List<Long> _val35;
                    _key34 = iprot.readI64();
                    {
                      org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                      _val35 = new ArrayList<Long>(_list36.size);
                      for (int _i37 = 0; _i37 < _list36.size; ++_i37)
                      {
                        long _elem38;
                        _elem38 = iprot.readI64();
                        _val35.add(_elem38);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key34, _val35);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGroupUsers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<Long, List<Long>> _iter39 : struct.success.entrySet())
            {
              oprot.writeI64(_iter39.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter39.getValue().size()));
                for (long _iter40 : _iter39.getValue())
                {
                  oprot.writeI64(_iter40);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGroupUsers_resultTupleSchemeFactory implements SchemeFactory {
      public getGroupUsers_resultTupleScheme getScheme() {
        return new getGroupUsers_resultTupleScheme();
      }
    }

    private static class getGroupUsers_resultTupleScheme extends TupleScheme<getGroupUsers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGroupUsers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Long, List<Long>> _iter41 : struct.success.entrySet())
            {
              oprot.writeI64(_iter41.getKey());
              {
                oprot.writeI32(_iter41.getValue().size());
                for (long _iter42 : _iter41.getValue())
                {
                  oprot.writeI64(_iter42);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGroupUsers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map43 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<Long,List<Long>>(2*_map43.size);
            for (int _i44 = 0; _i44 < _map43.size; ++_i44)
            {
              long _key45;
              List<Long> _val46;
              _key45 = iprot.readI64();
              {
                org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                _val46 = new ArrayList<Long>(_list47.size);
                for (int _i48 = 0; _i48 < _list47.size; ++_i48)
                {
                  long _elem49;
                  _elem49 = iprot.readI64();
                  _val46.add(_elem49);
                }
              }
              struct.success.put(_key45, _val46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class testCase1_args implements org.apache.thrift.TBase<testCase1_args, testCase1_args._Fields>, java.io.Serializable, Cloneable, Comparable<testCase1_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testCase1_args");

    private static final org.apache.thrift.protocol.TField ARG0_FIELD_DESC = new org.apache.thrift.protocol.TField("arg0", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField ARG1_FIELD_DESC = new org.apache.thrift.protocol.TField("arg1", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField ARG2_FIELD_DESC = new org.apache.thrift.protocol.TField("arg2", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField ARG3_FIELD_DESC = new org.apache.thrift.protocol.TField("arg3", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField ARG4_FIELD_DESC = new org.apache.thrift.protocol.TField("arg4", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new testCase1_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new testCase1_argsTupleSchemeFactory());
    }

    private Map<Integer,String> arg0; // required
    private List<User> arg1; // required
    private List<String> arg2; // required
    private long arg3; // required
    private String arg4; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG0((short)1, "arg0"),
      ARG1((short)2, "arg1"),
      ARG2((short)3, "arg2"),
      ARG3((short)4, "arg3"),
      ARG4((short)5, "arg4");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG0
            return ARG0;
          case 2: // ARG1
            return ARG1;
          case 3: // ARG2
            return ARG2;
          case 4: // ARG3
            return ARG3;
          case 5: // ARG4
            return ARG4;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ARG3_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG0, new org.apache.thrift.meta_data.FieldMetaData("arg0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ARG1, new org.apache.thrift.meta_data.FieldMetaData("arg1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class))));
      tmpMap.put(_Fields.ARG2, new org.apache.thrift.meta_data.FieldMetaData("arg2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ARG3, new org.apache.thrift.meta_data.FieldMetaData("arg3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ARG4, new org.apache.thrift.meta_data.FieldMetaData("arg4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testCase1_args.class, metaDataMap);
    }

    public testCase1_args() {
    }

    public testCase1_args(
      Map<Integer,String> arg0,
      List<User> arg1,
      List<String> arg2,
      long arg3,
      String arg4)
    {
      this();
      this.arg0 = arg0;
      this.arg1 = arg1;
      this.arg2 = arg2;
      this.arg3 = arg3;
      setArg3IsSet(true);
      this.arg4 = arg4;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testCase1_args(testCase1_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetArg0()) {
        Map<Integer,String> __this__arg0 = new HashMap<Integer,String>(other.arg0);
        this.arg0 = __this__arg0;
      }
      if (other.isSetArg1()) {
        List<User> __this__arg1 = new ArrayList<User>(other.arg1.size());
        for (User other_element : other.arg1) {
          __this__arg1.add(new User(other_element));
        }
        this.arg1 = __this__arg1;
      }
      if (other.isSetArg2()) {
        List<String> __this__arg2 = new ArrayList<String>(other.arg2);
        this.arg2 = __this__arg2;
      }
      this.arg3 = other.arg3;
      if (other.isSetArg4()) {
        this.arg4 = other.arg4;
      }
    }

    public testCase1_args deepCopy() {
      return new testCase1_args(this);
    }

    @Override
    public void clear() {
      this.arg0 = null;
      this.arg1 = null;
      this.arg2 = null;
      setArg3IsSet(false);
      this.arg3 = 0;
      this.arg4 = null;
    }

    public int getArg0Size() {
      return (this.arg0 == null) ? 0 : this.arg0.size();
    }

    public void putToArg0(int key, String val) {
      if (this.arg0 == null) {
        this.arg0 = new HashMap<Integer,String>();
      }
      this.arg0.put(key, val);
    }

    public Map<Integer,String> getArg0() {
      return this.arg0;
    }

    public void setArg0(Map<Integer,String> arg0) {
      this.arg0 = arg0;
    }

    public void unsetArg0() {
      this.arg0 = null;
    }

    /** Returns true if field arg0 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg0() {
      return this.arg0 != null;
    }

    public void setArg0IsSet(boolean value) {
      if (!value) {
        this.arg0 = null;
      }
    }

    public int getArg1Size() {
      return (this.arg1 == null) ? 0 : this.arg1.size();
    }

    public java.util.Iterator<User> getArg1Iterator() {
      return (this.arg1 == null) ? null : this.arg1.iterator();
    }

    public void addToArg1(User elem) {
      if (this.arg1 == null) {
        this.arg1 = new ArrayList<User>();
      }
      this.arg1.add(elem);
    }

    public List<User> getArg1() {
      return this.arg1;
    }

    public void setArg1(List<User> arg1) {
      this.arg1 = arg1;
    }

    public void unsetArg1() {
      this.arg1 = null;
    }

    /** Returns true if field arg1 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg1() {
      return this.arg1 != null;
    }

    public void setArg1IsSet(boolean value) {
      if (!value) {
        this.arg1 = null;
      }
    }

    public int getArg2Size() {
      return (this.arg2 == null) ? 0 : this.arg2.size();
    }

    public java.util.Iterator<String> getArg2Iterator() {
      return (this.arg2 == null) ? null : this.arg2.iterator();
    }

    public void addToArg2(String elem) {
      if (this.arg2 == null) {
        this.arg2 = new ArrayList<String>();
      }
      this.arg2.add(elem);
    }

    public List<String> getArg2() {
      return this.arg2;
    }

    public void setArg2(List<String> arg2) {
      this.arg2 = arg2;
    }

    public void unsetArg2() {
      this.arg2 = null;
    }

    /** Returns true if field arg2 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg2() {
      return this.arg2 != null;
    }

    public void setArg2IsSet(boolean value) {
      if (!value) {
        this.arg2 = null;
      }
    }

    public long getArg3() {
      return this.arg3;
    }

    public void setArg3(long arg3) {
      this.arg3 = arg3;
      setArg3IsSet(true);
    }

    public void unsetArg3() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARG3_ISSET_ID);
    }

    /** Returns true if field arg3 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg3() {
      return EncodingUtils.testBit(__isset_bitfield, __ARG3_ISSET_ID);
    }

    public void setArg3IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARG3_ISSET_ID, value);
    }

    public String getArg4() {
      return this.arg4;
    }

    public void setArg4(String arg4) {
      this.arg4 = arg4;
    }

    public void unsetArg4() {
      this.arg4 = null;
    }

    /** Returns true if field arg4 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg4() {
      return this.arg4 != null;
    }

    public void setArg4IsSet(boolean value) {
      if (!value) {
        this.arg4 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG0:
        if (value == null) {
          unsetArg0();
        } else {
          setArg0((Map<Integer,String>)value);
        }
        break;

      case ARG1:
        if (value == null) {
          unsetArg1();
        } else {
          setArg1((List<User>)value);
        }
        break;

      case ARG2:
        if (value == null) {
          unsetArg2();
        } else {
          setArg2((List<String>)value);
        }
        break;

      case ARG3:
        if (value == null) {
          unsetArg3();
        } else {
          setArg3((Long)value);
        }
        break;

      case ARG4:
        if (value == null) {
          unsetArg4();
        } else {
          setArg4((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG0:
        return getArg0();

      case ARG1:
        return getArg1();

      case ARG2:
        return getArg2();

      case ARG3:
        return Long.valueOf(getArg3());

      case ARG4:
        return getArg4();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG0:
        return isSetArg0();
      case ARG1:
        return isSetArg1();
      case ARG2:
        return isSetArg2();
      case ARG3:
        return isSetArg3();
      case ARG4:
        return isSetArg4();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testCase1_args)
        return this.equals((testCase1_args)that);
      return false;
    }

    public boolean equals(testCase1_args that) {
      if (that == null)
        return false;

      boolean this_present_arg0 = true && this.isSetArg0();
      boolean that_present_arg0 = true && that.isSetArg0();
      if (this_present_arg0 || that_present_arg0) {
        if (!(this_present_arg0 && that_present_arg0))
          return false;
        if (!this.arg0.equals(that.arg0))
          return false;
      }

      boolean this_present_arg1 = true && this.isSetArg1();
      boolean that_present_arg1 = true && that.isSetArg1();
      if (this_present_arg1 || that_present_arg1) {
        if (!(this_present_arg1 && that_present_arg1))
          return false;
        if (!this.arg1.equals(that.arg1))
          return false;
      }

      boolean this_present_arg2 = true && this.isSetArg2();
      boolean that_present_arg2 = true && that.isSetArg2();
      if (this_present_arg2 || that_present_arg2) {
        if (!(this_present_arg2 && that_present_arg2))
          return false;
        if (!this.arg2.equals(that.arg2))
          return false;
      }

      boolean this_present_arg3 = true;
      boolean that_present_arg3 = true;
      if (this_present_arg3 || that_present_arg3) {
        if (!(this_present_arg3 && that_present_arg3))
          return false;
        if (this.arg3 != that.arg3)
          return false;
      }

      boolean this_present_arg4 = true && this.isSetArg4();
      boolean that_present_arg4 = true && that.isSetArg4();
      if (this_present_arg4 || that_present_arg4) {
        if (!(this_present_arg4 && that_present_arg4))
          return false;
        if (!this.arg4.equals(that.arg4))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(testCase1_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArg0()).compareTo(other.isSetArg0());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg0()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg0, other.arg0);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg1()).compareTo(other.isSetArg1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg1, other.arg1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg2()).compareTo(other.isSetArg2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg2, other.arg2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg3()).compareTo(other.isSetArg3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg3, other.arg3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg4()).compareTo(other.isSetArg4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg4()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg4, other.arg4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testCase1_args(");
      boolean first = true;

      sb.append("arg0:");
      if (this.arg0 == null) {
        sb.append("null");
      } else {
        sb.append(this.arg0);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg1:");
      if (this.arg1 == null) {
        sb.append("null");
      } else {
        sb.append(this.arg1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg2:");
      if (this.arg2 == null) {
        sb.append("null");
      } else {
        sb.append(this.arg2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg3:");
      sb.append(this.arg3);
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg4:");
      if (this.arg4 == null) {
        sb.append("null");
      } else {
        sb.append(this.arg4);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testCase1_argsStandardSchemeFactory implements SchemeFactory {
      public testCase1_argsStandardScheme getScheme() {
        return new testCase1_argsStandardScheme();
      }
    }

    private static class testCase1_argsStandardScheme extends StandardScheme<testCase1_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testCase1_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG0
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                  struct.arg0 = new HashMap<Integer,String>(2*_map50.size);
                  for (int _i51 = 0; _i51 < _map50.size; ++_i51)
                  {
                    int _key52;
                    String _val53;
                    _key52 = iprot.readI32();
                    _val53 = iprot.readString();
                    struct.arg0.put(_key52, _val53);
                  }
                  iprot.readMapEnd();
                }
                struct.setArg0IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARG1
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                  struct.arg1 = new ArrayList<User>(_list54.size);
                  for (int _i55 = 0; _i55 < _list54.size; ++_i55)
                  {
                    User _elem56;
                    _elem56 = new User();
                    _elem56.read(iprot);
                    struct.arg1.add(_elem56);
                  }
                  iprot.readListEnd();
                }
                struct.setArg1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ARG2
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list57 = iprot.readListBegin();
                  struct.arg2 = new ArrayList<String>(_list57.size);
                  for (int _i58 = 0; _i58 < _list57.size; ++_i58)
                  {
                    String _elem59;
                    _elem59 = iprot.readString();
                    struct.arg2.add(_elem59);
                  }
                  iprot.readListEnd();
                }
                struct.setArg2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ARG3
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.arg3 = iprot.readI64();
                struct.setArg3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ARG4
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.arg4 = iprot.readString();
                struct.setArg4IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testCase1_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg0 != null) {
          oprot.writeFieldBegin(ARG0_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.arg0.size()));
            for (Map.Entry<Integer, String> _iter60 : struct.arg0.entrySet())
            {
              oprot.writeI32(_iter60.getKey());
              oprot.writeString(_iter60.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.arg1 != null) {
          oprot.writeFieldBegin(ARG1_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.arg1.size()));
            for (User _iter61 : struct.arg1)
            {
              _iter61.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.arg2 != null) {
          oprot.writeFieldBegin(ARG2_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.arg2.size()));
            for (String _iter62 : struct.arg2)
            {
              oprot.writeString(_iter62);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ARG3_FIELD_DESC);
        oprot.writeI64(struct.arg3);
        oprot.writeFieldEnd();
        if (struct.arg4 != null) {
          oprot.writeFieldBegin(ARG4_FIELD_DESC);
          oprot.writeString(struct.arg4);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testCase1_argsTupleSchemeFactory implements SchemeFactory {
      public testCase1_argsTupleScheme getScheme() {
        return new testCase1_argsTupleScheme();
      }
    }

    private static class testCase1_argsTupleScheme extends TupleScheme<testCase1_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testCase1_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg0()) {
          optionals.set(0);
        }
        if (struct.isSetArg1()) {
          optionals.set(1);
        }
        if (struct.isSetArg2()) {
          optionals.set(2);
        }
        if (struct.isSetArg3()) {
          optionals.set(3);
        }
        if (struct.isSetArg4()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetArg0()) {
          {
            oprot.writeI32(struct.arg0.size());
            for (Map.Entry<Integer, String> _iter63 : struct.arg0.entrySet())
            {
              oprot.writeI32(_iter63.getKey());
              oprot.writeString(_iter63.getValue());
            }
          }
        }
        if (struct.isSetArg1()) {
          {
            oprot.writeI32(struct.arg1.size());
            for (User _iter64 : struct.arg1)
            {
              _iter64.write(oprot);
            }
          }
        }
        if (struct.isSetArg2()) {
          {
            oprot.writeI32(struct.arg2.size());
            for (String _iter65 : struct.arg2)
            {
              oprot.writeString(_iter65);
            }
          }
        }
        if (struct.isSetArg3()) {
          oprot.writeI64(struct.arg3);
        }
        if (struct.isSetArg4()) {
          oprot.writeString(struct.arg4);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testCase1_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map66 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.arg0 = new HashMap<Integer,String>(2*_map66.size);
            for (int _i67 = 0; _i67 < _map66.size; ++_i67)
            {
              int _key68;
              String _val69;
              _key68 = iprot.readI32();
              _val69 = iprot.readString();
              struct.arg0.put(_key68, _val69);
            }
          }
          struct.setArg0IsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list70 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.arg1 = new ArrayList<User>(_list70.size);
            for (int _i71 = 0; _i71 < _list70.size; ++_i71)
            {
              User _elem72;
              _elem72 = new User();
              _elem72.read(iprot);
              struct.arg1.add(_elem72);
            }
          }
          struct.setArg1IsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.arg2 = new ArrayList<String>(_list73.size);
            for (int _i74 = 0; _i74 < _list73.size; ++_i74)
            {
              String _elem75;
              _elem75 = iprot.readString();
              struct.arg2.add(_elem75);
            }
          }
          struct.setArg2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.arg3 = iprot.readI64();
          struct.setArg3IsSet(true);
        }
        if (incoming.get(4)) {
          struct.arg4 = iprot.readString();
          struct.setArg4IsSet(true);
        }
      }
    }

  }

  public static class testCase1_result implements org.apache.thrift.TBase<testCase1_result, testCase1_result._Fields>, java.io.Serializable, Cloneable, Comparable<testCase1_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testCase1_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new testCase1_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new testCase1_resultTupleSchemeFactory());
    }

    private List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testCase1_result.class, metaDataMap);
    }

    public testCase1_result() {
    }

    public testCase1_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testCase1_result(testCase1_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public testCase1_result deepCopy() {
      return new testCase1_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testCase1_result)
        return this.equals((testCase1_result)that);
      return false;
    }

    public boolean equals(testCase1_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(testCase1_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testCase1_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testCase1_resultStandardSchemeFactory implements SchemeFactory {
      public testCase1_resultStandardScheme getScheme() {
        return new testCase1_resultStandardScheme();
      }
    }

    private static class testCase1_resultStandardScheme extends StandardScheme<testCase1_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testCase1_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list76.size);
                  for (int _i77 = 0; _i77 < _list76.size; ++_i77)
                  {
                    String _elem78;
                    _elem78 = iprot.readString();
                    struct.success.add(_elem78);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testCase1_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter79 : struct.success)
            {
              oprot.writeString(_iter79);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testCase1_resultTupleSchemeFactory implements SchemeFactory {
      public testCase1_resultTupleScheme getScheme() {
        return new testCase1_resultTupleScheme();
      }
    }

    private static class testCase1_resultTupleScheme extends TupleScheme<testCase1_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testCase1_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter80 : struct.success)
            {
              oprot.writeString(_iter80);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testCase1_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list81.size);
            for (int _i82 = 0; _i82 < _list81.size; ++_i82)
            {
              String _elem83;
              _elem83 = iprot.readString();
              struct.success.add(_elem83);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUsersByName_args implements org.apache.thrift.TBase<getUsersByName_args, getUsersByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUsersByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUsersByName_args");

    private static final org.apache.thrift.protocol.TField ARG0_FIELD_DESC = new org.apache.thrift.protocol.TField("arg0", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUsersByName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUsersByName_argsTupleSchemeFactory());
    }

    private List<String> arg0; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG0((short)1, "arg0");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG0
            return ARG0;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG0, new org.apache.thrift.meta_data.FieldMetaData("arg0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUsersByName_args.class, metaDataMap);
    }

    public getUsersByName_args() {
    }

    public getUsersByName_args(
      List<String> arg0)
    {
      this();
      this.arg0 = arg0;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUsersByName_args(getUsersByName_args other) {
      if (other.isSetArg0()) {
        List<String> __this__arg0 = new ArrayList<String>(other.arg0);
        this.arg0 = __this__arg0;
      }
    }

    public getUsersByName_args deepCopy() {
      return new getUsersByName_args(this);
    }

    @Override
    public void clear() {
      this.arg0 = null;
    }

    public int getArg0Size() {
      return (this.arg0 == null) ? 0 : this.arg0.size();
    }

    public java.util.Iterator<String> getArg0Iterator() {
      return (this.arg0 == null) ? null : this.arg0.iterator();
    }

    public void addToArg0(String elem) {
      if (this.arg0 == null) {
        this.arg0 = new ArrayList<String>();
      }
      this.arg0.add(elem);
    }

    public List<String> getArg0() {
      return this.arg0;
    }

    public void setArg0(List<String> arg0) {
      this.arg0 = arg0;
    }

    public void unsetArg0() {
      this.arg0 = null;
    }

    /** Returns true if field arg0 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg0() {
      return this.arg0 != null;
    }

    public void setArg0IsSet(boolean value) {
      if (!value) {
        this.arg0 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG0:
        if (value == null) {
          unsetArg0();
        } else {
          setArg0((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG0:
        return getArg0();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG0:
        return isSetArg0();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUsersByName_args)
        return this.equals((getUsersByName_args)that);
      return false;
    }

    public boolean equals(getUsersByName_args that) {
      if (that == null)
        return false;

      boolean this_present_arg0 = true && this.isSetArg0();
      boolean that_present_arg0 = true && that.isSetArg0();
      if (this_present_arg0 || that_present_arg0) {
        if (!(this_present_arg0 && that_present_arg0))
          return false;
        if (!this.arg0.equals(that.arg0))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUsersByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArg0()).compareTo(other.isSetArg0());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg0()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg0, other.arg0);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUsersByName_args(");
      boolean first = true;

      sb.append("arg0:");
      if (this.arg0 == null) {
        sb.append("null");
      } else {
        sb.append(this.arg0);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUsersByName_argsStandardSchemeFactory implements SchemeFactory {
      public getUsersByName_argsStandardScheme getScheme() {
        return new getUsersByName_argsStandardScheme();
      }
    }

    private static class getUsersByName_argsStandardScheme extends StandardScheme<getUsersByName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUsersByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG0
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list84 = iprot.readListBegin();
                  struct.arg0 = new ArrayList<String>(_list84.size);
                  for (int _i85 = 0; _i85 < _list84.size; ++_i85)
                  {
                    String _elem86;
                    _elem86 = iprot.readString();
                    struct.arg0.add(_elem86);
                  }
                  iprot.readListEnd();
                }
                struct.setArg0IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUsersByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg0 != null) {
          oprot.writeFieldBegin(ARG0_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.arg0.size()));
            for (String _iter87 : struct.arg0)
            {
              oprot.writeString(_iter87);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUsersByName_argsTupleSchemeFactory implements SchemeFactory {
      public getUsersByName_argsTupleScheme getScheme() {
        return new getUsersByName_argsTupleScheme();
      }
    }

    private static class getUsersByName_argsTupleScheme extends TupleScheme<getUsersByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUsersByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg0()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetArg0()) {
          {
            oprot.writeI32(struct.arg0.size());
            for (String _iter88 : struct.arg0)
            {
              oprot.writeString(_iter88);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUsersByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.arg0 = new ArrayList<String>(_list89.size);
            for (int _i90 = 0; _i90 < _list89.size; ++_i90)
            {
              String _elem91;
              _elem91 = iprot.readString();
              struct.arg0.add(_elem91);
            }
          }
          struct.setArg0IsSet(true);
        }
      }
    }

  }

  public static class getUsersByName_result implements org.apache.thrift.TBase<getUsersByName_result, getUsersByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUsersByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUsersByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUsersByName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUsersByName_resultTupleSchemeFactory());
    }

    private Map<String,List<User>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUsersByName_result.class, metaDataMap);
    }

    public getUsersByName_result() {
    }

    public getUsersByName_result(
      Map<String,List<User>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUsersByName_result(getUsersByName_result other) {
      if (other.isSetSuccess()) {
        Map<String,List<User>> __this__success = new HashMap<String,List<User>>(other.success.size());
        for (Map.Entry<String, List<User>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          List<User> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          List<User> __this__success_copy_value = new ArrayList<User>(other_element_value.size());
          for (User other_element_value_element : other_element_value) {
            __this__success_copy_value.add(new User(other_element_value_element));
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getUsersByName_result deepCopy() {
      return new getUsersByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, List<User> val) {
      if (this.success == null) {
        this.success = new HashMap<String,List<User>>();
      }
      this.success.put(key, val);
    }

    public Map<String,List<User>> getSuccess() {
      return this.success;
    }

    public void setSuccess(Map<String,List<User>> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,List<User>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUsersByName_result)
        return this.equals((getUsersByName_result)that);
      return false;
    }

    public boolean equals(getUsersByName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUsersByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUsersByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUsersByName_resultStandardSchemeFactory implements SchemeFactory {
      public getUsersByName_resultStandardScheme getScheme() {
        return new getUsersByName_resultStandardScheme();
      }
    }

    private static class getUsersByName_resultStandardScheme extends StandardScheme<getUsersByName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUsersByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map92 = iprot.readMapBegin();
                  struct.success = new HashMap<String,List<User>>(2*_map92.size);
                  for (int _i93 = 0; _i93 < _map92.size; ++_i93)
                  {
                    String _key94;
                    List<User> _val95;
                    _key94 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                      _val95 = new ArrayList<User>(_list96.size);
                      for (int _i97 = 0; _i97 < _list96.size; ++_i97)
                      {
                        User _elem98;
                        _elem98 = new User();
                        _elem98.read(iprot);
                        _val95.add(_elem98);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key94, _val95);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUsersByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (Map.Entry<String, List<User>> _iter99 : struct.success.entrySet())
            {
              oprot.writeString(_iter99.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter99.getValue().size()));
                for (User _iter100 : _iter99.getValue())
                {
                  _iter100.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUsersByName_resultTupleSchemeFactory implements SchemeFactory {
      public getUsersByName_resultTupleScheme getScheme() {
        return new getUsersByName_resultTupleScheme();
      }
    }

    private static class getUsersByName_resultTupleScheme extends TupleScheme<getUsersByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUsersByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, List<User>> _iter101 : struct.success.entrySet())
            {
              oprot.writeString(_iter101.getKey());
              {
                oprot.writeI32(_iter101.getValue().size());
                for (User _iter102 : _iter101.getValue())
                {
                  _iter102.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUsersByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map103 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new HashMap<String,List<User>>(2*_map103.size);
            for (int _i104 = 0; _i104 < _map103.size; ++_i104)
            {
              String _key105;
              List<User> _val106;
              _key105 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list107 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _val106 = new ArrayList<User>(_list107.size);
                for (int _i108 = 0; _i108 < _list107.size; ++_i108)
                {
                  User _elem109;
                  _elem109 = new User();
                  _elem109.read(iprot);
                  _val106.add(_elem109);
                }
              }
              struct.success.put(_key105, _val106);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class login_args implements org.apache.thrift.TBase<login_args, login_args._Fields>, java.io.Serializable, Cloneable, Comparable<login_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_args");

    private static final org.apache.thrift.protocol.TField ARG0_FIELD_DESC = new org.apache.thrift.protocol.TField("arg0", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ARG1_FIELD_DESC = new org.apache.thrift.protocol.TField("arg1", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new login_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new login_argsTupleSchemeFactory());
    }

    private int arg0; // required
    private String arg1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG0((short)1, "arg0"),
      ARG1((short)2, "arg1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG0
            return ARG0;
          case 2: // ARG1
            return ARG1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ARG0_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG0, new org.apache.thrift.meta_data.FieldMetaData("arg0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ARG1, new org.apache.thrift.meta_data.FieldMetaData("arg1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_args.class, metaDataMap);
    }

    public login_args() {
    }

    public login_args(
      int arg0,
      String arg1)
    {
      this();
      this.arg0 = arg0;
      setArg0IsSet(true);
      this.arg1 = arg1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_args(login_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.arg0 = other.arg0;
      if (other.isSetArg1()) {
        this.arg1 = other.arg1;
      }
    }

    public login_args deepCopy() {
      return new login_args(this);
    }

    @Override
    public void clear() {
      setArg0IsSet(false);
      this.arg0 = 0;
      this.arg1 = null;
    }

    public int getArg0() {
      return this.arg0;
    }

    public void setArg0(int arg0) {
      this.arg0 = arg0;
      setArg0IsSet(true);
    }

    public void unsetArg0() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARG0_ISSET_ID);
    }

    /** Returns true if field arg0 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg0() {
      return EncodingUtils.testBit(__isset_bitfield, __ARG0_ISSET_ID);
    }

    public void setArg0IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARG0_ISSET_ID, value);
    }

    public String getArg1() {
      return this.arg1;
    }

    public void setArg1(String arg1) {
      this.arg1 = arg1;
    }

    public void unsetArg1() {
      this.arg1 = null;
    }

    /** Returns true if field arg1 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg1() {
      return this.arg1 != null;
    }

    public void setArg1IsSet(boolean value) {
      if (!value) {
        this.arg1 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG0:
        if (value == null) {
          unsetArg0();
        } else {
          setArg0((Integer)value);
        }
        break;

      case ARG1:
        if (value == null) {
          unsetArg1();
        } else {
          setArg1((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG0:
        return Integer.valueOf(getArg0());

      case ARG1:
        return getArg1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG0:
        return isSetArg0();
      case ARG1:
        return isSetArg1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof login_args)
        return this.equals((login_args)that);
      return false;
    }

    public boolean equals(login_args that) {
      if (that == null)
        return false;

      boolean this_present_arg0 = true;
      boolean that_present_arg0 = true;
      if (this_present_arg0 || that_present_arg0) {
        if (!(this_present_arg0 && that_present_arg0))
          return false;
        if (this.arg0 != that.arg0)
          return false;
      }

      boolean this_present_arg1 = true && this.isSetArg1();
      boolean that_present_arg1 = true && that.isSetArg1();
      if (this_present_arg1 || that_present_arg1) {
        if (!(this_present_arg1 && that_present_arg1))
          return false;
        if (!this.arg1.equals(that.arg1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(login_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArg0()).compareTo(other.isSetArg0());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg0()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg0, other.arg0);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArg1()).compareTo(other.isSetArg1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg1, other.arg1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("login_args(");
      boolean first = true;

      sb.append("arg0:");
      sb.append(this.arg0);
      first = false;
      if (!first) sb.append(", ");
      sb.append("arg1:");
      if (this.arg1 == null) {
        sb.append("null");
      } else {
        sb.append(this.arg1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_argsStandardSchemeFactory implements SchemeFactory {
      public login_argsStandardScheme getScheme() {
        return new login_argsStandardScheme();
      }
    }

    private static class login_argsStandardScheme extends StandardScheme<login_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG0
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.arg0 = iprot.readI32();
                struct.setArg0IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARG1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.arg1 = iprot.readString();
                struct.setArg1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ARG0_FIELD_DESC);
        oprot.writeI32(struct.arg0);
        oprot.writeFieldEnd();
        if (struct.arg1 != null) {
          oprot.writeFieldBegin(ARG1_FIELD_DESC);
          oprot.writeString(struct.arg1);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_argsTupleSchemeFactory implements SchemeFactory {
      public login_argsTupleScheme getScheme() {
        return new login_argsTupleScheme();
      }
    }

    private static class login_argsTupleScheme extends TupleScheme<login_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg0()) {
          optionals.set(0);
        }
        if (struct.isSetArg1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetArg0()) {
          oprot.writeI32(struct.arg0);
        }
        if (struct.isSetArg1()) {
          oprot.writeString(struct.arg1);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.arg0 = iprot.readI32();
          struct.setArg0IsSet(true);
        }
        if (incoming.get(1)) {
          struct.arg1 = iprot.readString();
          struct.setArg1IsSet(true);
        }
      }
    }

  }

  public static class login_result implements org.apache.thrift.TBase<login_result, login_result._Fields>, java.io.Serializable, Cloneable, Comparable<login_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new login_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new login_resultTupleSchemeFactory());
    }

    private User success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_result.class, metaDataMap);
    }

    public login_result() {
    }

    public login_result(
      User success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_result(login_result other) {
      if (other.isSetSuccess()) {
        this.success = new User(other.success);
      }
    }

    public login_result deepCopy() {
      return new login_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public User getSuccess() {
      return this.success;
    }

    public void setSuccess(User success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((User)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof login_result)
        return this.equals((login_result)that);
      return false;
    }

    public boolean equals(login_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(login_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("login_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_resultStandardSchemeFactory implements SchemeFactory {
      public login_resultStandardScheme getScheme() {
        return new login_resultStandardScheme();
      }
    }

    private static class login_resultStandardScheme extends StandardScheme<login_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new User();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_resultTupleSchemeFactory implements SchemeFactory {
      public login_resultTupleScheme getScheme() {
        return new login_resultTupleScheme();
      }
    }

    private static class login_resultTupleScheme extends TupleScheme<login_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new User();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserByIds_args implements org.apache.thrift.TBase<getUserByIds_args, getUserByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserByIds_args");

    private static final org.apache.thrift.protocol.TField ARG0_FIELD_DESC = new org.apache.thrift.protocol.TField("arg0", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserByIds_argsTupleSchemeFactory());
    }

    private List<User> arg0; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG0((short)1, "arg0");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG0
            return ARG0;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG0, new org.apache.thrift.meta_data.FieldMetaData("arg0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserByIds_args.class, metaDataMap);
    }

    public getUserByIds_args() {
    }

    public getUserByIds_args(
      List<User> arg0)
    {
      this();
      this.arg0 = arg0;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserByIds_args(getUserByIds_args other) {
      if (other.isSetArg0()) {
        List<User> __this__arg0 = new ArrayList<User>(other.arg0.size());
        for (User other_element : other.arg0) {
          __this__arg0.add(new User(other_element));
        }
        this.arg0 = __this__arg0;
      }
    }

    public getUserByIds_args deepCopy() {
      return new getUserByIds_args(this);
    }

    @Override
    public void clear() {
      this.arg0 = null;
    }

    public int getArg0Size() {
      return (this.arg0 == null) ? 0 : this.arg0.size();
    }

    public java.util.Iterator<User> getArg0Iterator() {
      return (this.arg0 == null) ? null : this.arg0.iterator();
    }

    public void addToArg0(User elem) {
      if (this.arg0 == null) {
        this.arg0 = new ArrayList<User>();
      }
      this.arg0.add(elem);
    }

    public List<User> getArg0() {
      return this.arg0;
    }

    public void setArg0(List<User> arg0) {
      this.arg0 = arg0;
    }

    public void unsetArg0() {
      this.arg0 = null;
    }

    /** Returns true if field arg0 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg0() {
      return this.arg0 != null;
    }

    public void setArg0IsSet(boolean value) {
      if (!value) {
        this.arg0 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG0:
        if (value == null) {
          unsetArg0();
        } else {
          setArg0((List<User>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG0:
        return getArg0();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG0:
        return isSetArg0();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserByIds_args)
        return this.equals((getUserByIds_args)that);
      return false;
    }

    public boolean equals(getUserByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_arg0 = true && this.isSetArg0();
      boolean that_present_arg0 = true && that.isSetArg0();
      if (this_present_arg0 || that_present_arg0) {
        if (!(this_present_arg0 && that_present_arg0))
          return false;
        if (!this.arg0.equals(that.arg0))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArg0()).compareTo(other.isSetArg0());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg0()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg0, other.arg0);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserByIds_args(");
      boolean first = true;

      sb.append("arg0:");
      if (this.arg0 == null) {
        sb.append("null");
      } else {
        sb.append(this.arg0);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getUserByIds_argsStandardScheme getScheme() {
        return new getUserByIds_argsStandardScheme();
      }
    }

    private static class getUserByIds_argsStandardScheme extends StandardScheme<getUserByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG0
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list110 = iprot.readListBegin();
                  struct.arg0 = new ArrayList<User>(_list110.size);
                  for (int _i111 = 0; _i111 < _list110.size; ++_i111)
                  {
                    User _elem112;
                    _elem112 = new User();
                    _elem112.read(iprot);
                    struct.arg0.add(_elem112);
                  }
                  iprot.readListEnd();
                }
                struct.setArg0IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg0 != null) {
          oprot.writeFieldBegin(ARG0_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.arg0.size()));
            for (User _iter113 : struct.arg0)
            {
              _iter113.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getUserByIds_argsTupleScheme getScheme() {
        return new getUserByIds_argsTupleScheme();
      }
    }

    private static class getUserByIds_argsTupleScheme extends TupleScheme<getUserByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg0()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetArg0()) {
          {
            oprot.writeI32(struct.arg0.size());
            for (User _iter114 : struct.arg0)
            {
              _iter114.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list115 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.arg0 = new ArrayList<User>(_list115.size);
            for (int _i116 = 0; _i116 < _list115.size; ++_i116)
            {
              User _elem117;
              _elem117 = new User();
              _elem117.read(iprot);
              struct.arg0.add(_elem117);
            }
          }
          struct.setArg0IsSet(true);
        }
      }
    }

  }

  public static class getUserByIds_result implements org.apache.thrift.TBase<getUserByIds_result, getUserByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserByIds_resultTupleSchemeFactory());
    }

    private Map<Long,User> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserByIds_result.class, metaDataMap);
    }

    public getUserByIds_result() {
    }

    public getUserByIds_result(
      Map<Long,User> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserByIds_result(getUserByIds_result other) {
      if (other.isSetSuccess()) {
        Map<Long,User> __this__success = new HashMap<Long,User>(other.success.size());
        for (Map.Entry<Long, User> other_element : other.success.entrySet()) {

          Long other_element_key = other_element.getKey();
          User other_element_value = other_element.getValue();

          Long __this__success_copy_key = other_element_key;

          User __this__success_copy_value = new User(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getUserByIds_result deepCopy() {
      return new getUserByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(long key, User val) {
      if (this.success == null) {
        this.success = new HashMap<Long,User>();
      }
      this.success.put(key, val);
    }

    public Map<Long,User> getSuccess() {
      return this.success;
    }

    public void setSuccess(Map<Long,User> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Long,User>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserByIds_result)
        return this.equals((getUserByIds_result)that);
      return false;
    }

    public boolean equals(getUserByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getUserByIds_resultStandardScheme getScheme() {
        return new getUserByIds_resultStandardScheme();
      }
    }

    private static class getUserByIds_resultStandardScheme extends StandardScheme<getUserByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map118 = iprot.readMapBegin();
                  struct.success = new HashMap<Long,User>(2*_map118.size);
                  for (int _i119 = 0; _i119 < _map118.size; ++_i119)
                  {
                    long _key120;
                    User _val121;
                    _key120 = iprot.readI64();
                    _val121 = new User();
                    _val121.read(iprot);
                    struct.success.put(_key120, _val121);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<Long, User> _iter122 : struct.success.entrySet())
            {
              oprot.writeI64(_iter122.getKey());
              _iter122.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getUserByIds_resultTupleScheme getScheme() {
        return new getUserByIds_resultTupleScheme();
      }
    }

    private static class getUserByIds_resultTupleScheme extends TupleScheme<getUserByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Long, User> _iter123 : struct.success.entrySet())
            {
              oprot.writeI64(_iter123.getKey());
              _iter123.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map124 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<Long,User>(2*_map124.size);
            for (int _i125 = 0; _i125 < _map124.size; ++_i125)
            {
              long _key126;
              User _val127;
              _key126 = iprot.readI64();
              _val127 = new User();
              _val127.read(iprot);
              struct.success.put(_key126, _val127);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserIds_args implements org.apache.thrift.TBase<getUserIds_args, getUserIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserIds_args");

    private static final org.apache.thrift.protocol.TField ARG0_FIELD_DESC = new org.apache.thrift.protocol.TField("arg0", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserIds_argsTupleSchemeFactory());
    }

    private long arg0; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG0((short)1, "arg0");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG0
            return ARG0;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ARG0_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG0, new org.apache.thrift.meta_data.FieldMetaData("arg0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserIds_args.class, metaDataMap);
    }

    public getUserIds_args() {
    }

    public getUserIds_args(
      long arg0)
    {
      this();
      this.arg0 = arg0;
      setArg0IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserIds_args(getUserIds_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.arg0 = other.arg0;
    }

    public getUserIds_args deepCopy() {
      return new getUserIds_args(this);
    }

    @Override
    public void clear() {
      setArg0IsSet(false);
      this.arg0 = 0;
    }

    public long getArg0() {
      return this.arg0;
    }

    public void setArg0(long arg0) {
      this.arg0 = arg0;
      setArg0IsSet(true);
    }

    public void unsetArg0() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARG0_ISSET_ID);
    }

    /** Returns true if field arg0 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg0() {
      return EncodingUtils.testBit(__isset_bitfield, __ARG0_ISSET_ID);
    }

    public void setArg0IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARG0_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG0:
        if (value == null) {
          unsetArg0();
        } else {
          setArg0((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG0:
        return Long.valueOf(getArg0());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG0:
        return isSetArg0();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserIds_args)
        return this.equals((getUserIds_args)that);
      return false;
    }

    public boolean equals(getUserIds_args that) {
      if (that == null)
        return false;

      boolean this_present_arg0 = true;
      boolean that_present_arg0 = true;
      if (this_present_arg0 || that_present_arg0) {
        if (!(this_present_arg0 && that_present_arg0))
          return false;
        if (this.arg0 != that.arg0)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArg0()).compareTo(other.isSetArg0());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg0()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg0, other.arg0);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserIds_args(");
      boolean first = true;

      sb.append("arg0:");
      sb.append(this.arg0);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserIds_argsStandardSchemeFactory implements SchemeFactory {
      public getUserIds_argsStandardScheme getScheme() {
        return new getUserIds_argsStandardScheme();
      }
    }

    private static class getUserIds_argsStandardScheme extends StandardScheme<getUserIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG0
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.arg0 = iprot.readI64();
                struct.setArg0IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ARG0_FIELD_DESC);
        oprot.writeI64(struct.arg0);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserIds_argsTupleSchemeFactory implements SchemeFactory {
      public getUserIds_argsTupleScheme getScheme() {
        return new getUserIds_argsTupleScheme();
      }
    }

    private static class getUserIds_argsTupleScheme extends TupleScheme<getUserIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg0()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetArg0()) {
          oprot.writeI64(struct.arg0);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.arg0 = iprot.readI64();
          struct.setArg0IsSet(true);
        }
      }
    }

  }

  public static class getUserIds_result implements org.apache.thrift.TBase<getUserIds_result, getUserIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserIds_resultTupleSchemeFactory());
    }

    private List<User> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserIds_result.class, metaDataMap);
    }

    public getUserIds_result() {
    }

    public getUserIds_result(
      List<User> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserIds_result(getUserIds_result other) {
      if (other.isSetSuccess()) {
        List<User> __this__success = new ArrayList<User>(other.success.size());
        for (User other_element : other.success) {
          __this__success.add(new User(other_element));
        }
        this.success = __this__success;
      }
    }

    public getUserIds_result deepCopy() {
      return new getUserIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<User> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(User elem) {
      if (this.success == null) {
        this.success = new ArrayList<User>();
      }
      this.success.add(elem);
    }

    public List<User> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<User> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<User>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserIds_result)
        return this.equals((getUserIds_result)that);
      return false;
    }

    public boolean equals(getUserIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserIds_resultStandardSchemeFactory implements SchemeFactory {
      public getUserIds_resultStandardScheme getScheme() {
        return new getUserIds_resultStandardScheme();
      }
    }

    private static class getUserIds_resultStandardScheme extends StandardScheme<getUserIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new ArrayList<User>(_list128.size);
                  for (int _i129 = 0; _i129 < _list128.size; ++_i129)
                  {
                    User _elem130;
                    _elem130 = new User();
                    _elem130.read(iprot);
                    struct.success.add(_elem130);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (User _iter131 : struct.success)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserIds_resultTupleSchemeFactory implements SchemeFactory {
      public getUserIds_resultTupleScheme getScheme() {
        return new getUserIds_resultTupleScheme();
      }
    }

    private static class getUserIds_resultTupleScheme extends TupleScheme<getUserIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (User _iter132 : struct.success)
            {
              _iter132.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<User>(_list133.size);
            for (int _i134 = 0; _i134 < _list133.size; ++_i134)
            {
              User _elem135;
              _elem135 = new User();
              _elem135.read(iprot);
              struct.success.add(_elem135);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveUser_args implements org.apache.thrift.TBase<saveUser_args, saveUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveUser_args");

    private static final org.apache.thrift.protocol.TField ARG0_FIELD_DESC = new org.apache.thrift.protocol.TField("arg0", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveUser_argsTupleSchemeFactory());
    }

    private User arg0; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG0((short)1, "arg0");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG0
            return ARG0;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG0, new org.apache.thrift.meta_data.FieldMetaData("arg0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveUser_args.class, metaDataMap);
    }

    public saveUser_args() {
    }

    public saveUser_args(
      User arg0)
    {
      this();
      this.arg0 = arg0;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveUser_args(saveUser_args other) {
      if (other.isSetArg0()) {
        this.arg0 = new User(other.arg0);
      }
    }

    public saveUser_args deepCopy() {
      return new saveUser_args(this);
    }

    @Override
    public void clear() {
      this.arg0 = null;
    }

    public User getArg0() {
      return this.arg0;
    }

    public void setArg0(User arg0) {
      this.arg0 = arg0;
    }

    public void unsetArg0() {
      this.arg0 = null;
    }

    /** Returns true if field arg0 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg0() {
      return this.arg0 != null;
    }

    public void setArg0IsSet(boolean value) {
      if (!value) {
        this.arg0 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG0:
        if (value == null) {
          unsetArg0();
        } else {
          setArg0((User)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG0:
        return getArg0();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG0:
        return isSetArg0();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveUser_args)
        return this.equals((saveUser_args)that);
      return false;
    }

    public boolean equals(saveUser_args that) {
      if (that == null)
        return false;

      boolean this_present_arg0 = true && this.isSetArg0();
      boolean that_present_arg0 = true && that.isSetArg0();
      if (this_present_arg0 || that_present_arg0) {
        if (!(this_present_arg0 && that_present_arg0))
          return false;
        if (!this.arg0.equals(that.arg0))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saveUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArg0()).compareTo(other.isSetArg0());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg0()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg0, other.arg0);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveUser_args(");
      boolean first = true;

      sb.append("arg0:");
      if (this.arg0 == null) {
        sb.append("null");
      } else {
        sb.append(this.arg0);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (arg0 != null) {
        arg0.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveUser_argsStandardSchemeFactory implements SchemeFactory {
      public saveUser_argsStandardScheme getScheme() {
        return new saveUser_argsStandardScheme();
      }
    }

    private static class saveUser_argsStandardScheme extends StandardScheme<saveUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG0
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.arg0 = new User();
                struct.arg0.read(iprot);
                struct.setArg0IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.arg0 != null) {
          oprot.writeFieldBegin(ARG0_FIELD_DESC);
          struct.arg0.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveUser_argsTupleSchemeFactory implements SchemeFactory {
      public saveUser_argsTupleScheme getScheme() {
        return new saveUser_argsTupleScheme();
      }
    }

    private static class saveUser_argsTupleScheme extends TupleScheme<saveUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg0()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetArg0()) {
          struct.arg0.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.arg0 = new User();
          struct.arg0.read(iprot);
          struct.setArg0IsSet(true);
        }
      }
    }

  }

  public static class saveUser_result implements org.apache.thrift.TBase<saveUser_result, saveUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveUser_resultTupleSchemeFactory());
    }

    private boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveUser_result.class, metaDataMap);
    }

    public saveUser_result() {
    }

    public saveUser_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveUser_result(saveUser_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveUser_result deepCopy() {
      return new saveUser_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveUser_result)
        return this.equals((saveUser_result)that);
      return false;
    }

    public boolean equals(saveUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saveUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveUser_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveUser_resultStandardSchemeFactory implements SchemeFactory {
      public saveUser_resultStandardScheme getScheme() {
        return new saveUser_resultStandardScheme();
      }
    }

    private static class saveUser_resultStandardScheme extends StandardScheme<saveUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveUser_resultTupleSchemeFactory implements SchemeFactory {
      public saveUser_resultTupleScheme getScheme() {
        return new saveUser_resultTupleScheme();
      }
    }

    private static class saveUser_resultTupleScheme extends TupleScheme<saveUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserById_args implements org.apache.thrift.TBase<getUserById_args, getUserById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserById_args");

    private static final org.apache.thrift.protocol.TField ARG0_FIELD_DESC = new org.apache.thrift.protocol.TField("arg0", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserById_argsTupleSchemeFactory());
    }

    private long arg0; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ARG0((short)1, "arg0");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARG0
            return ARG0;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ARG0_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARG0, new org.apache.thrift.meta_data.FieldMetaData("arg0", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserById_args.class, metaDataMap);
    }

    public getUserById_args() {
    }

    public getUserById_args(
      long arg0)
    {
      this();
      this.arg0 = arg0;
      setArg0IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserById_args(getUserById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.arg0 = other.arg0;
    }

    public getUserById_args deepCopy() {
      return new getUserById_args(this);
    }

    @Override
    public void clear() {
      setArg0IsSet(false);
      this.arg0 = 0;
    }

    public long getArg0() {
      return this.arg0;
    }

    public void setArg0(long arg0) {
      this.arg0 = arg0;
      setArg0IsSet(true);
    }

    public void unsetArg0() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARG0_ISSET_ID);
    }

    /** Returns true if field arg0 is set (has been assigned a value) and false otherwise */
    public boolean isSetArg0() {
      return EncodingUtils.testBit(__isset_bitfield, __ARG0_ISSET_ID);
    }

    public void setArg0IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARG0_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARG0:
        if (value == null) {
          unsetArg0();
        } else {
          setArg0((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARG0:
        return Long.valueOf(getArg0());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARG0:
        return isSetArg0();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserById_args)
        return this.equals((getUserById_args)that);
      return false;
    }

    public boolean equals(getUserById_args that) {
      if (that == null)
        return false;

      boolean this_present_arg0 = true;
      boolean that_present_arg0 = true;
      if (this_present_arg0 || that_present_arg0) {
        if (!(this_present_arg0 && that_present_arg0))
          return false;
        if (this.arg0 != that.arg0)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetArg0()).compareTo(other.isSetArg0());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArg0()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg0, other.arg0);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserById_args(");
      boolean first = true;

      sb.append("arg0:");
      sb.append(this.arg0);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserById_argsStandardSchemeFactory implements SchemeFactory {
      public getUserById_argsStandardScheme getScheme() {
        return new getUserById_argsStandardScheme();
      }
    }

    private static class getUserById_argsStandardScheme extends StandardScheme<getUserById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ARG0
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.arg0 = iprot.readI64();
                struct.setArg0IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ARG0_FIELD_DESC);
        oprot.writeI64(struct.arg0);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserById_argsTupleSchemeFactory implements SchemeFactory {
      public getUserById_argsTupleScheme getScheme() {
        return new getUserById_argsTupleScheme();
      }
    }

    private static class getUserById_argsTupleScheme extends TupleScheme<getUserById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetArg0()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetArg0()) {
          oprot.writeI64(struct.arg0);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.arg0 = iprot.readI64();
          struct.setArg0IsSet(true);
        }
      }
    }

  }

  public static class getUserById_result implements org.apache.thrift.TBase<getUserById_result, getUserById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserById_resultTupleSchemeFactory());
    }

    private User success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserById_result.class, metaDataMap);
    }

    public getUserById_result() {
    }

    public getUserById_result(
      User success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserById_result(getUserById_result other) {
      if (other.isSetSuccess()) {
        this.success = new User(other.success);
      }
    }

    public getUserById_result deepCopy() {
      return new getUserById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public User getSuccess() {
      return this.success;
    }

    public void setSuccess(User success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((User)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserById_result)
        return this.equals((getUserById_result)that);
      return false;
    }

    public boolean equals(getUserById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserById_resultStandardSchemeFactory implements SchemeFactory {
      public getUserById_resultStandardScheme getScheme() {
        return new getUserById_resultStandardScheme();
      }
    }

    private static class getUserById_resultStandardScheme extends StandardScheme<getUserById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new User();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserById_resultTupleSchemeFactory implements SchemeFactory {
      public getUserById_resultTupleScheme getScheme() {
        return new getUserById_resultTupleScheme();
      }
    }

    private static class getUserById_resultTupleScheme extends TupleScheme<getUserById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new User();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
